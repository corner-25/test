import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json
from datetime import datetime
import numpy as np

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Ph√¢n t√≠ch d·ªØ li·ªáu ho·∫°t ƒë·ªông vƒÉn ph√≤ng",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Ti√™u ƒë·ªÅ ch√≠nh
st.title("üìä Ph√¢n t√≠ch d·ªØ li·ªáu ho·∫°t ƒë·ªông vƒÉn ph√≤ng")
st.markdown("---")

@st.cache_data
def load_sample_data():
    """T·∫£i v√† x·ª≠ l√Ω d·ªØ li·ªáu m·∫´u t·ª´ file JSON ƒë√£ cung c·∫•p"""
    # D·ªØ li·ªáu m·∫´u ho√†n ch·ªânh t·ª´ file JSON b·∫°n cung c·∫•p
    sample_data = [
        {"category": "Quan ly phong hop", "content": "Tong so lich hop", "date": 6, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban phat hanh di", "content": "Tong so van ban phat hanh", "date": 7, "month": 1, "year": 2025, "count": 2},
        {"category": "Van ban den", "content": "Tong so van ban den", "date": 7, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban phat hanh hop dong", "content": "Tong so van ban phat hanh", "date": 8, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban phat hanh di", "content": "Tong so van ban phat hanh", "date": 9, "month": 1, "year": 2025, "count": 1},
        {"category": "Quan ly phong hop", "content": "Tong so lich hop", "date": 9, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban phat hanh di", "content": "Tong so van ban phat hanh", "date": 10, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban den", "content": "Tong so van ban den", "date": 13, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban phat hanh hop dong", "content": "Tong so van ban phat hanh", "date": 16, "month": 1, "year": 2025, "count": 1},
        {"category": "Quan ly phong hop", "content": "Tong so lich hop", "date": 16, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban phat hanh hop dong", "content": "Tong so van ban phat hanh", "date": 20, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban den", "content": "Tong so van ban den", "date": 20, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban den", "content": "Tong so van ban den", "date": 21, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban phat hanh quyet dinh", "content": "Tong so van ban phat hanh", "date": 21, "month": 1, "year": 2025, "count": 2},
        {"category": "Van ban phat hanh di", "content": "Tong so van ban phat hanh", "date": 21, "month": 1, "year": 2025, "count": 2},
        {"category": "Quan ly phong hop", "content": "Tong so lich hop", "date": 21, "month": 1, "year": 2025, "count": 1},
        {"category": "Van ban phat hanh di", "content": "Tong so van ban phat hanh", "date": 22, "month": 1, "year": 2025, "count": 2},
        {"category": "Van ban den", "content": "Tong so van ban den", "date": 22, "month": 1, "year": 2025, "count": 4},
        {"category": "Van ban den", "content": "Tong so van ban den", "date": 23, "month": 1, "year": 2025, "count": 4},
        {"category": "Van ban den", "content": "Tong so van ban den", "date": 24, "month": 1, "year": 2025, "count": 1},
        {"category": "Quan ly lich hop", "content": "Tong lich lam viec", "date": 3, "month": 3, "year": 2025, "count": 2},
        {"category": "Van ban phat hanh di", "content": "Tong so van ban phat hanh", "date": 4, "month": 3, "year": 2025, "count": 1},
        {"category": "Van ban phat hanh quyet dinh", "content": "Tong so van ban phat hanh", "date": 4, "month": 3, "year": 2025, "count": 1},
        {"category": "Quan ly lich hop", "content": "Tong lich lam viec", "date": 5, "month": 3, "year": 2025, "count": 4},
        {"category": "Quan ly lich hop", "content": "Tong lich lam viec", "date": 6, "month": 3, "year": 2025, "count": 178},
        {"category": "Quan ly lich hop", "content": "Tong lich lam viec", "date": 17, "month": 6, "year": 2025, "count": 862},
        {"category": "Quan ly lich hop", "content": "Tong lich lam viec", "date": 21, "month": 6, "year": 2025, "count": 243},
        {"category": "Quan ly lich hop", "content": "Tong lich lam viec", "date": 10, "month": 6, "year": 2025, "count": 151}
    ]
    
    return process_data(sample_data)

def process_data(data_list):
    """X·ª≠ l√Ω d·ªØ li·ªáu chung"""
    # Chuy·ªÉn ƒë·ªïi th√†nh DataFrame
    df = pd.DataFrame(data_list)
    
    # Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
    required_columns = ['category', 'date', 'month', 'year', 'count']
    if not all(col in df.columns for col in required_columns):
        st.error(f"‚ùå Thi·∫øu c√°c c·ªôt c·∫ßn thi·∫øt: {[col for col in required_columns if col not in df.columns]}")
        return None
    
    # T·∫°o c·ªôt ng√†y ho√†n ch·ªânh - S·ª¨A CH√çNH T·∫†I ƒê√ÇY
    try:
        # Rename c·ªôt 'date' th√†nh 'day' ƒë·ªÉ pandas hi·ªÉu
        df_temp = df.copy()
        df_temp['day'] = df_temp['date']  # pandas c·∫ßn c·ªôt 'day' kh√¥ng ph·∫£i 'date'
        
        df['full_date'] = pd.to_datetime(df_temp[['year', 'month', 'day']], errors='coerce')
        # Lo·∫°i b·ªè c√°c d√≤ng c√≥ ng√†y kh√¥ng h·ª£p l·ªá
        df = df.dropna(subset=['full_date'])
    except Exception as e:
        st.error(f"‚ùå L·ªói khi t·∫°o c·ªôt ng√†y: {str(e)}")
        return None
    
    # D·ªãch t√™n category sang ti·∫øng Vi·ªát r√µ r√†ng h∆°n
    category_mapping = {
        'Quan ly phong hop': 'Qu·∫£n l√Ω ph√≤ng h·ªçp',
        'Van ban phat hanh di': 'VƒÉn b·∫£n ph√°t h√†nh ƒëi',
        'Van ban den': 'VƒÉn b·∫£n ƒë·∫øn',
        'Van ban phat hanh hop dong': 'VƒÉn b·∫£n h·ª£p ƒë·ªìng',
        'Van ban phat hanh quyet dinh': 'Quy·∫øt ƒë·ªãnh',
        'Quan ly cong viec': 'Qu·∫£n l√Ω c√¥ng vi·ªác',
        'Quan ly lich hop': 'Qu·∫£n l√Ω l·ªãch h·ªçp',
        'Van ban phat hanhquy che': 'Quy ch·∫ø',
        'Van ban phat hanhhuong dan': 'H∆∞·ªõng d·∫´n',
        'Van ban phat hanhquy trinh': 'Quy tr√¨nh',
        'Van ban phat hanhquy dinh': 'Quy ƒë·ªãnh'
    }
    
    df['category_clean'] = df['category'].map(category_mapping).fillna(df['category'])
    
    return df

def process_uploaded_data(data):
    """X·ª≠ l√Ω d·ªØ li·ªáu ƒë∆∞·ª£c upload"""
    try:
        # Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu
        if isinstance(data, dict) and 'data' in data:
            data_list = data['data']
        elif isinstance(data, list):
            data_list = data
        else:
            st.error("‚ùå C·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá")
            return None
        
        # S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω chung
        return process_data(data_list)
        
    except Exception as e:
        st.error(f"‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu: {str(e)}")
        return None

def create_time_series_chart(df):
    """T·∫°o bi·ªÉu ƒë·ªì th·ªùi gian"""
    # Nh√≥m d·ªØ li·ªáu theo ng√†y v√† category
    daily_data = df.groupby(['full_date', 'category_clean'])['count'].sum().reset_index()
    
    fig = px.line(
        daily_data, 
        x='full_date', 
        y='count', 
        color='category_clean',
        title='Xu h∆∞·ªõng ho·∫°t ƒë·ªông theo th·ªùi gian',
        labels={'full_date': 'Ng√†y', 'count': 'S·ªë l∆∞·ª£ng', 'category_clean': 'Lo·∫°i ho·∫°t ƒë·ªông'}
    )
    
    fig.update_layout(
        height=500,
        xaxis_title="Th·ªùi gian",
        yaxis_title="S·ªë l∆∞·ª£ng",
        legend_title="Lo·∫°i ho·∫°t ƒë·ªông"
    )
    
    return fig

def create_category_summary(df):
    """T·∫°o bi·ªÉu ƒë·ªì t·ªïng quan theo category"""
    category_summary = df.groupby('category_clean')['count'].sum().reset_index()
    category_summary = category_summary.sort_values('count', ascending=True)
    
    fig = px.bar(
        category_summary,
        x='count',
        y='category_clean',
        orientation='h',
        title='T·ªïng s·ªë l∆∞·ª£ng theo lo·∫°i ho·∫°t ƒë·ªông',
        labels={'count': 'T·ªïng s·ªë l∆∞·ª£ng', 'category_clean': 'Lo·∫°i ho·∫°t ƒë·ªông'},
        color='count',
        color_continuous_scale='viridis'
    )
    
    fig.update_layout(height=500)
    
    return fig

def create_monthly_heatmap(df):
    """T·∫°o heatmap theo th√°ng"""
    monthly_data = df.groupby(['month', 'category_clean'])['count'].sum().reset_index()
    pivot_data = monthly_data.pivot(index='category_clean', columns='month', values='count')
    pivot_data = pivot_data.fillna(0)
    
    fig = px.imshow(
        pivot_data,
        title='Ph√¢n b·ªë ho·∫°t ƒë·ªông theo th√°ng (Heatmap)',
        labels={'x': 'Th√°ng', 'y': 'Lo·∫°i ho·∫°t ƒë·ªông', 'color': 'S·ªë l∆∞·ª£ng'},
        aspect='auto'
    )
    
    fig.update_layout(height=600)
    
    return fig

def create_daily_pattern(df):
    """Ph√¢n t√≠ch pattern theo ng√†y trong th√°ng"""
    df['day_of_month'] = df['date']
    daily_pattern = df.groupby('day_of_month')['count'].sum().reset_index()
    
    fig = px.bar(
        daily_pattern,
        x='day_of_month',
        y='count',
        title='Ph√¢n b·ªë ho·∫°t ƒë·ªông theo ng√†y trong th√°ng',
        labels={'day_of_month': 'Ng√†y trong th√°ng', 'count': 'T·ªïng s·ªë l∆∞·ª£ng'}
    )
    
    fig.update_layout(height=400)
    
    return fig

def main():
    """H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng"""
    
    # Sidebar cho upload file
    st.sidebar.header("üìÅ T·∫£i d·ªØ li·ªáu")
    uploaded_file = st.sidebar.file_uploader(
        "Ch·ªçn file JSON", 
        type=['json'],
        help="T·∫£i l√™n file JSON ch·ª©a d·ªØ li·ªáu c·∫ßn ph√¢n t√≠ch"
    )
    
    # Load d·ªØ li·ªáu
    df = None
    
    if uploaded_file is not None:
        try:
            data = json.load(uploaded_file)
            df = process_uploaded_data(data)
            
            if df is not None:
                st.success(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {len(df)} b·∫£n ghi!")
            else:
                st.error("‚ùå Kh√¥ng th·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu t·ª´ file JSON")
                return
            
        except json.JSONDecodeError as e:
            st.error(f"‚ùå L·ªói ƒë·ªãnh d·∫°ng JSON: {str(e)}")
            return
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ƒë·ªçc file: {str(e)}")
            return
    else:
        # S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥ file upload
        st.info("üí° Vui l√≤ng t·∫£i l√™n file JSON ƒë·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu th·ª±c t·∫ø.")
        st.info("üìä Hi·ªán ƒëang hi·ªÉn th·ªã v·ªõi d·ªØ li·ªáu m·∫´u.")
        df = load_sample_data()
    
    # Ki·ªÉm tra df kh√¥ng None
    if df is None or df.empty:
        st.error("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã")
        return
    
    # Sidebar filters
    st.sidebar.header("üîß B·ªô l·ªçc")
    
    # Filter theo category
    categories = df['category_clean'].unique()
    selected_categories = st.sidebar.multiselect(
        "Ch·ªçn lo·∫°i ho·∫°t ƒë·ªông:",
        categories,
        default=categories
    )
    
    # Filter theo th·ªùi gian
    date_range = st.sidebar.date_input(
        "Ch·ªçn kho·∫£ng th·ªùi gian:",
        value=[df['full_date'].min().date(), df['full_date'].max().date()],
        min_value=df['full_date'].min().date(),
        max_value=df['full_date'].max().date()
    )
    
    # √Åp d·ª•ng filter
    if len(date_range) == 2:
        mask = (
            (df['category_clean'].isin(selected_categories)) &
            (df['full_date'].dt.date >= date_range[0]) &
            (df['full_date'].dt.date <= date_range[1])
        )
        filtered_df = df[mask]
    else:
        filtered_df = df[df['category_clean'].isin(selected_categories)]
    
    # Hi·ªÉn th·ªã th·ªëng k√™ t·ªïng quan
    st.header("üìà Th·ªëng k√™ t·ªïng quan")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_records = len(filtered_df)
        st.metric("T·ªïng s·ªë b·∫£n ghi", f"{total_records:,}")
    
    with col2:
        total_count = filtered_df['count'].sum()
        st.metric("T·ªïng s·ªë l∆∞·ª£ng", f"{total_count:,}")
    
    with col3:
        avg_count = filtered_df['count'].mean()
        st.metric("Trung b√¨nh/ng√†y", f"{avg_count:.1f}")
    
    with col4:
        unique_categories = filtered_df['category_clean'].nunique()
        st.metric("S·ªë lo·∫°i ho·∫°t ƒë·ªông", unique_categories)
    
    # Tab layout cho c√°c bi·ªÉu ƒë·ªì
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä T·ªïng quan", 
        "üìà Xu h∆∞·ªõng th·ªùi gian", 
        "üî• Heatmap", 
        "üìÖ Theo ng√†y", 
        "üìã D·ªØ li·ªáu chi ti·∫øt"
    ])
    
    with tab1:
        st.plotly_chart(create_category_summary(filtered_df), use_container_width=True)
        
        # Top 5 ng√†y c√≥ ho·∫°t ƒë·ªông cao nh·∫•t
        st.subheader("üîù Top 5 ng√†y c√≥ ho·∫°t ƒë·ªông cao nh·∫•t")
        top_days = filtered_df.groupby('full_date')['count'].sum().nlargest(5)
        for date, count in top_days.items():
            st.write(f"üìÖ **{date.strftime('%d/%m/%Y')}**: {count} ho·∫°t ƒë·ªông")
    
    with tab2:
        st.plotly_chart(create_time_series_chart(filtered_df), use_container_width=True)
    
    with tab3:
        st.plotly_chart(create_monthly_heatmap(filtered_df), use_container_width=True)
    
    with tab4:
        st.plotly_chart(create_daily_pattern(filtered_df), use_container_width=True)
    
    with tab5:
        st.subheader("üìã D·ªØ li·ªáu chi ti·∫øt")
        
        # Hi·ªÉn th·ªã b·∫£ng v·ªõi kh·∫£ nƒÉng sort
        display_df = filtered_df[['full_date', 'category_clean', 'content', 'count']].copy()
        display_df['full_date'] = display_df['full_date'].dt.strftime('%d/%m/%Y')
        display_df.columns = ['Ng√†y', 'Lo·∫°i ho·∫°t ƒë·ªông', 'N·ªôi dung', 'S·ªë l∆∞·ª£ng']
        
        st.dataframe(
            display_df,
            use_container_width=True,
            height=400
        )
        
        # N√∫t download
        csv = filtered_df.to_csv(index=False, encoding='utf-8')
        st.download_button(
            label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu CSV",
            data=csv,
            file_name=f"data_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )

if __name__ == "__main__":
    main()